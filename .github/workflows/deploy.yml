name: remote ssh command for deploy
on:
 push:
   branches: [release/*]
jobs:
 deploy:
   name: Deploy
   runs-on: ubuntu-22.04
   steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Extract version from branch name
      run: |
        echo "GITHUB_REF: $GITHUB_REF"
        BRANCH_NAME="${GITHUB_REF##*/}"  # refs/heads/release/1.0.0 → 1.0.0
        echo "Branch name: $BRANCH_NAME"

        if [[ "$BRANCH_NAME" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          VERSION="$BRANCH_NAME"
          echo "Extracted version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        else
          echo "Branch name is not a valid version string."
          exit 1
        fi

    - name: Use version
      run: |
        echo "Version from env: $VERSION"
        echo "uname is ${{ vars.DOCKERHUB_USERNAME }}"

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push - Airflow image
      uses: docker/build-push-action@v6
      with:
        context: airflow
        push: true
        tags: ${{ vars.DOCKERHUB_USERNAME }}/at-airflow:${{ env.VERSION }}
        cache-from: type=gha # Guthub Actions 캐시
        cache-to: type=gha,mode=max

    - name: Build and push - FastAPI image
      uses: docker/build-push-action@v6
      with:
        context: fastapi_server
        push: true
        tags: ${{ vars.DOCKERHUB_USERNAME }}/at-fastapi:${{ env.VERSION }}
        cache-from: type=gha # Guthub Actions 캐시
        cache-to: type=gha,mode=max

    - name: Get Github action IP
      id: ip
      uses: haythem/public-ip@v1.2

    - name: Setting environment variables
      run: |
        echo "AWS_DEFAULT_REGION=ap-northeast-2" >> $GITHUB_ENV
        echo "AWS_SG_NAME=launch-wizard-1" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Install AWS CLI
      run: |
        sudo apt-get update && sudo apt-get install -yy less

        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install

    - name: Add Github Actions IP to Security group
      run: |
        aws ec2 authorize-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port 24 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ap-northeast-2
    - name: executing remote ssh commands using key
      run: |
        echo "${{ secrets.HOST }}"

    - name: Send docker-compose file to remote with SCP
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        source: docker-compose.yaml
        target: ${{ vars.BASE_PATH }}

    - name: Send .env vars to remote with SCP
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        source: "*.env"
        target: ${{ vars.BASE_PATH }}

    - name: Send run script to remote with SCP
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        source: run.sh
        target: ${{ vars.BASE_PATH }}

    - name: executing remote ssh commands using key
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        script: |
          docker login -u ${{ vars.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

          cd ${{ vars.BASE_PATH }}
          sh run.sh


    - name: Remove Github Actions IP from security group
      run: |
        aws ec2 revoke-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ap-northeast-2
